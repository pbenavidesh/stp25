---
title: "Descomposición de series de tiempo"
author: "PBH"
format: 
  html:
    embed-resources: true
---

```{r}
#| message: false

library(tidyverse)
library(fpp3)
```

tsibble

## Tasmania

```{r}
tasmania <- tourism |> 
  filter(State == "Tasmania",
         Region == "East Coast")

tasmania
```

```{r}
#| warning: false
tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  autoplot() +
  theme(legend.position = "bottom")
```

```{r}
#| warning: false

tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Holiday") |> 
  autoplot()

tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Business") |> 
  autoplot()

tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Visiting") |> 
  autoplot()

tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Other") |> 
  autoplot()
```

```{r}
aus_production |> 
  autoplot(Gas)
aus_production |> 
  model(classical_decomposition(Gas, type = "multiplicative")) |> 
  components() |> 
  autoplot()
```

La función `model()` sirve para ajustar uno o más modelos a la(s) serie(s) de tiempo. Nos devuelve una tabla de modelos (`mable`).

```{r}
tasmania |> 
  model(
    dcmp_clasica = classical_decomposition(Trips)
  )
tasmania_comp <- tasmania |> 
  model(
    dcmp_clasica = classical_decomposition(Trips)
  ) |> 
  components()

tasmania_comp

tasmania_comp |> 
  autoplot()
```

```{r}
tasmania_comp |> 
  filter(Purpose == "Holiday") |> 
  ggplot(aes(x = Quarter, y = Trips)) +
  geom_line(color = "grey", size = 2) +
  geom_line(aes(y = season_adjust), color = "dodgerblue", size = 2)

```

## Victoria

```{r}
victoria <- tourism |> 
  filter(State == "Victoria", Region == "Lakes")
```


```{r}
#| warning: false

victoria |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Holiday") |> 
  autoplot()

victoria |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Business") |> 
  autoplot()

victoria |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Visiting") |> 
  autoplot()

victoria |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Other") |> 
  autoplot()
```
# Gas


```{r}
aus_production |> 
  autoplot(Gas)

aus_production |> 
  model(
    stl = STL(Gas ~ trend(window = 39) + season())
  ) |> 
  components() |> 
  autoplot()
```


## Descomposición STL

```{r}
tasmania |> 
  filter(Purpose == "Holiday") |> 
  model(
    STL(Trips ~ trend(window = 11) + season(window = "periodic"), robust = TRUE)
  ) |> 
  components() |> 
  autoplot()
```

## Transformaciones matemáticas y descomposición STL

```{r}
aus_production |> 
  autoplot(Gas)

aus_production |> 
  autoplot(log(Gas))

aus_production |> 
  model(STL(Gas ~ season(window = 7), robust = TRUE)) |> 
  components() |> 
  autoplot()

aus_production |> 
  model(STL(log(Gas) ~ season(window = "periodic"), robust = TRUE)) |> 
  components() |> 
  autoplot()
```

## Tendencia y serie desestacionalizada

```{r}
aus_production |> 
  model(STL(Gas, robust = TRUE)) |> 
  components() |> 
  ggplot(aes(x = Quarter, y = Gas)) +
  geom_line(color = "grey", size = 1) +
  geom_line(aes(y = trend), color = "firebrick", size = 1)

aus_production |> 
  model(STL(Gas, robust = TRUE)) |> 
  components() |> 
  ggplot(aes(x = Quarter, y = Gas)) +
  geom_line(color = "grey", size = 1) +
  geom_line(aes(y = season_adjust), color = "dodgerblue", size = 1)
```


### Gráfica de tiempo

```{r}
aus_production |> 
  autoplot(Gas) +
  geom_point()
```

### Gráficas estacionales

```{r}
aus_production |> 
  model(STL(Gas, robust = TRUE)) |> 
  components() |>
  mutate(sin_tend = season_year + remainder) |> 
  gg_season(sin_tend)

aus_production |> 
  gg_season(Gas)
```
### Gráfica de subseries

```{r}
aus_production |> 
  gg_subseries(Gas)
```

### Inspección visual rápida

```{r}
aus_production |> 
  gg_tsdisplay(Gas)
```

## Benchmark models

```{r}
gas_fit <- aus_production |> 
  model(
    media          = MEAN(Gas),
    naive          = NAIVE(Gas),
    seasonal_naive = SNAIVE(Gas),
    drift          = NAIVE(Gas ~ drift())
  )

gas_fit
```
```{r}
#| warning: false

gas_aug <- gas_fit |> 
  augment()
gas_aug

gas_aug |> 
  autoplot(.innov) +
  facet_wrap(vars(.model), scale = "free_y") +
  theme(legend.position = "none")

gas_aug |> 
  group_by_key() |>
  as_tibble() |> 
  summarise(media = mean(.resid, na.rm = TRUE))
```

## Diagnóstico de residuos


```{r}
aus_production |> 
  select(Quarter, Gas) |> 
  mutate(lag1 = lag(Gas),
         lag2 = lag(Gas,2),
         lag3 = lag(Gas,3),
         lag4 = lag(Gas,4)
         )

aus_production |> 
  ACF(Gas)

aus_production |> 
  ACF(Gas) |> 
  autoplot()
```


```{r}
#| warning: false
gas_fit |> 
  select(seasonal_naive) |> 
  gg_tsresiduals()
```

### Pruebas de autocorrelación - Ljung-Box

$$
H_0 : Q = 0 \text{ "No autocorrelacion"} \\
H_1 : Q \neq 0 \text{ "Autocorrelacion"}
$$


```{r}
gas_aug |> 
  features(.innov, ljung_box, lag = 8)
```

## Pronósticos

```{r}
gas_fit |> 
  forecast(h = "5 years") |> 
  autoplot(aus_production) +
  facet_wrap(vars(.model), scales = "free_y")
```

```{r}
gas_fit <- aus_production |> 
  model(
    stlf = decomposition_model(
      # especificar la descomposición
      STL(Gas ~ season(window = 7), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ),
    stlf_log = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    )
  )
gas_fit |> 
  forecast(h = "5 years") |> 
  autoplot(aus_production, level = NULL)
```

## Train/test

```{r}
gas_train <- aus_production |> 
  filter_index(. ~ "2005 Q2")
```

```{r}
gas_fit <- gas_train |> 
  model(
    stlf = decomposition_model(
      # especificar la descomposición
      STL(Gas ~ season(window = 7), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ),
    stlf_log = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    )
  )
gas_fit |> 
  forecast(h = "5 years") |> 
  autoplot(aus_production, level = NULL)
```

```{r}
gas_fcst <- gas_fit |> 
  mutate(combinado = (stlf + stlf_log)/2) |> 
  forecast(h = "5 years")

gas_fcst |> 
  autoplot(aus_production, level = NULL)
```

```{r}
accuracy(gas_fit)

gas_fcst |> 
  accuracy(aus_production)
```



```{r}
gas_fit <- gas_train |> 
  model(
    modelo_combinado = combination_model(
      stlf = decomposition_model(
      # especificar la descomposición
      STL(Gas ~ season(window = 7), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ),
    stlf_log = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    )
    ),
    modelo_ponderado = combination_weighted(
      stlf = decomposition_model(
      # especificar la descomposición
      STL(Gas ~ season(window = 7), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ),
    stlf_log = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ), weights = c(0.7, 0.3)
    )
  )
gas_fcst <- gas_fit |> 
  forecast(h = "5 years") 

gas_fcst |> 
  autoplot(aus_production |> filter_index("1990 Q1" ~ .), level = NULL, size = 1)
```

```{r}
gas_fcst |> 
  accuracy(aus_production)
```





```{r}
gas_fit2 <- aus_production |> 
  model(
    stlf = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ),
    stlf2 = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # Si no se especifica cómo modelar la estacionalidad, se toma SNAIVE por default
      NAIVE(season_adjust)
    )
  )

gas_fit2
```

```{r}
#| warning: false
gas_fit2 |> 
  select(stlf) |> 
  gg_tsresiduals()

gas_fit2 |> 
  select(stlf2) |> 
  gg_tsresiduals()

gas_fit2 |> 
  augment() |> 
  features(.innov, ljung_box, lag = 8)
```

```{r}
gas_fit2 |> 
  forecast(h = "5 years") |> 
  autoplot(aus_production, level = NULL)  
```

Para poder verificar la precisión del pronóstico, es necesario separar los datos en, al menos, un conjunto de entrenamiento y prueba (train/test).



## Ajuste de modelos de descomposición

```{r}
gas_fit2 <- gas_train |> 
  model(
    stlf = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ),
    stlf2 = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # Si no se especifica cómo modelar la estacionalidad, se toma SNAIVE por default
      NAIVE(season_adjust)
    )
  )

gas_fit2

gas_fit2 |> 
  augment() |> 
  features(.innov, ljung_box, lag = 8)
```

### Pronósticos

```{r}
gas_fcst <- gas_fit2 |> 
  forecast(h = "5 years") 

gas_fcst

gas_fcst |> 
  autoplot(aus_production, size = 1, level = NULL)

gas_fcst |> 
  autoplot(aus_production, size = 1) +
  facet_wrap(vars(.model), scales = "free_y", ncol = 1) +
  theme(legend.position = "none")
```

### Métricas de error en el entrenamiento

```{r}
accuracy(gas_fit2)
```

### Error de pronóstico

```{r}
gas_fcst |> 
  accuracy(aus_production)
```

## Combinación de modelos

```{r}
gas_fit3 <- gas_fit2 |> 
  mutate(
    stl_combinado = (stlf + stlf2)/2
  )
gas_fit3
```

```{r}
gas_fit3 |> 
  augment() |> 
  features(.innov, ljung_box, lag = 8)

gas_fcst3 <- gas_fit3 |> 
  forecast(h = "5 years") 

gas_fcst3 |> 
  autoplot(aus_production, level = NULL)

gas_fcst3 |> 
  autoplot(aus_production) +
  facet_wrap(vars(.model), scales = "free_y", ncol = 1) +
  theme(legend.position = "none")

gas_fcst3 |> 
  accuracy(aus_production)
```
## Más combinaciones

```{r}
gas_fit4 <- gas_train |> 
  model(
    stl_combi1 = combination_model(
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       RW(season_adjust ~ drift())
    ),
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       NAIVE(season_adjust)
    )
    ),
    stl_combi_weights = combination_weighted(
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       RW(season_adjust ~ drift())
    ),
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       NAIVE(season_adjust)
    ), weights = c(0.9, 1.1)
    ),
    combinado_sin_stl = combination_model(
      SNAIVE(log(Gas)),
      RW(log(Gas) ~ drift())
    )
    
  )
gas_fit4

gas_fit4 |>
  augment() |> 
  features(.innov, ljung_box, lag = 8)

accuracy(gas_fit4) |> 
  arrange(MAPE)
```
```{r}
gas_fcst4 <- gas_fit4 |> 
  forecast(h = "5 years")

gas_fcst4 |> 
  autoplot(aus_production|> filter_index("1990 Q1" ~ .))

gas_fcst4 |> 
  accuracy(aus_production) |> 
  arrange(MAPE)
```

